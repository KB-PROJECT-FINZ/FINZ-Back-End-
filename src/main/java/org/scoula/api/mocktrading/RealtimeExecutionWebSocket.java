package org.scoula.api.mocktrading;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;

import java.net.URI;

public class RealtimeExecutionWebSocket {

    private static final String WS_URL = "ws://ops.koreainvestment.com:21000/tryitout/H0STCNT0"; // Î™®ÏùòÌà¨Ïûê WebSocket URL

    public static void main(String[] args) throws Exception {
        TokenManager.TokenInfo tokenInfo = TokenManager.getTokenInfo();
        String approvalKey = tokenInfo.getApprovalKey();

        WebSocketClient client = new WebSocketClient(new URI(WS_URL)) {
            @Override
            public void onOpen(ServerHandshake handshakeData) {
                System.out.println("‚úÖ WebSocket Ïó∞Í≤∞(H0STCNT0)");

                try {
                    ObjectMapper mapper = new ObjectMapper();

                    ObjectNode header = mapper.createObjectNode();
                    header.put("approval_key", approvalKey);
                    header.put("custtype", "P");
                    header.put("tr_type", "1");
                    header.put("content-type", "utf-8");

                    ObjectNode input = mapper.createObjectNode();
                    input.put("tr_id", "H0STCNT0");
                    input.put("tr_key", "005930"); // ÏÇºÏÑ±Ï†ÑÏûê

                    ObjectNode body = mapper.createObjectNode();
                    body.set("input", input);

                    ObjectNode request = mapper.createObjectNode();
                    request.set("header", header);
                    request.set("body", body);

                    String json = mapper.writeValueAsString(request);
                    send(json);
                    System.out.println("‚ñ∂ Íµ¨ÎèÖ ÏöîÏ≤≠ Ï†ÑÏÜ°:\n" + json);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onMessage(String message) {
                if (message.startsWith("0|H0STCNT0|")) {
                    String[] parts = message.split("\\|");
                    if (parts.length < 4) {
                        System.out.println("‚ö† Î©îÏãúÏßÄ ÌòïÏãù Ïò§Î•ò: " + message);
                        return;
                    }

                    String data = parts[3];
                    String[] fields = data.split("\\^");

                    try {
                        String stockCode = fields[0];
                        String time = fields[1];
                        String price = fields[2];
                        String sign = fields[3];
                        String diff = fields[4];
                        String rate = fields[5];
                        String volume = fields[13];
                        String amount = fields[14];
                        String buyPrice = fields[11];
                        String sellPrice = fields[10];

                        String signSymbol = sign.equals("2") || sign.equals("5") ? "-" : "+";

                        System.out.println("üìä [Ïã§ÏãúÍ∞Ñ Ï≤¥Í≤∞ Îç∞Ïù¥ÌÑ∞]");
                        System.out.printf("üìà Ï¢ÖÎ™©ÏΩîÎìú: %s%n", stockCode);
                        System.out.printf("üïí Ï≤¥Í≤∞ÏãúÍ∞Ñ: %s%n", time);
                        System.out.printf("üíµ ÌòÑÏû¨Í∞Ä: %sÏõê (%s %s, %s%%)%n", price, signSymbol, diff, rate);
                        System.out.printf("üßÆ ÎàÑÏ†ÅÍ±∞ÎûòÎüâ: %sÏ£º, ÎàÑÏ†ÅÍ±∞ÎûòÎåÄÍ∏à: %sÏõê%n", volume, amount);
                        System.out.printf("üìâ Îß§ÎèÑÌò∏Í∞Ä: %sÏõê, üìà Îß§ÏàòÌò∏Í∞Ä: %sÏõê%n", sellPrice, buyPrice);
                        System.out.println("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ");

                        // TODO: ÌîÑÎ°†Ìä∏ÏóîÎìúÏóê Î©îÏãúÏßÄ Ï†ÑÏÜ°ÌïòÎäî ÏΩîÎìú (Ïòà: WebSocket relay, REST endpointÎ°ú Ï†ÑÏÜ° Îì±)
                    } catch (Exception e) {
                        System.out.println("‚ùå Îç∞Ïù¥ÌÑ∞ ÌååÏã± Ïò§Î•ò: " + e.getMessage());
                    }
                } else {
                    System.out.println("üì© [Í∏∞ÌÉÄ Î©îÏãúÏßÄ]:\n" + message);
                }
            }

            @Override
            public void onClose(int code, String reason, boolean remote) {
                System.out.println("‚ùå WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å(H0STCNT0): " + reason);
            }

            @Override
            public void onError(Exception ex) {
                System.err.println("‚ö† WebSocket Ïò§Î•ò(H0STCNT0): " + ex.getMessage());
            }
        };

        client.connect();
    }
}

<?xml version="1.0" encoding="UTF-8" ?>
    <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
    <mapper namespace="org.scoula.mapper.chatbot.ChatBotMapper">


        <insert id="insertChatMessage"
                parameterType="org.scoula.domain.chatbot.dto.ChatMessageDto"
                useGeneratedKeys="true"
                keyProperty="id">
            INSERT INTO chat_messages (user_id, session_id, role, content, intent_type)
            VALUES (#{userId}, #{sessionId}, #{role}, #{content}, #{intentType})
        </insert>

        <select id="getMessagesBySessionId" parameterType="int" resultType="org.scoula.domain.chatbot.dto.ChatMessageDto">
            SELECT * FROM chat_messages
            WHERE session_id = #{sessionId}
            ORDER BY created_at ASC
        </select>

        <select id="getMessageById" parameterType="int" resultType="org.scoula.domain.chatbot.dto.ChatMessageDto">
            SELECT * FROM chat_messages
            WHERE id = #{id}
        </select>


        <insert id="insertChatSession" parameterType="org.scoula.domain.chatbot.dto.ChatSessionDto" useGeneratedKeys="true" keyProperty="id">
            INSERT INTO chat_sessions (user_id, last_intent)
            VALUES (#{userId}, #{lastIntent})
        </insert>

        <update id="updateChatSessionIntent" parameterType="org.scoula.domain.chatbot.dto.ChatSessionDto">
            UPDATE chat_sessions
            SET last_intent = #{lastIntent}, ended_at = #{endedAt}
            WHERE id = #{id}
        </update>

        <!-- 마지막 intent 가져오기 -->
        <select id="getLastIntentBySessionId" resultType="org.scoula.domain.chatbot.enums.IntentType">
            SELECT last_intent
            FROM chat_sessions
            WHERE id = #{sessionId}
        </select>

        <!-- 세션 종료 처리 -->
        <update id="endChatSession">
            UPDATE chat_sessions
            SET ended_at = NOW()
            WHERE id = #{sessionId}
        </update>


    <insert id="insertChatError" parameterType="org.scoula.domain.chatbot.dto.ChatErrorDto">
        INSERT INTO chat_errors (user_id, error_message, error_type)
        VALUES (#{userId}, #{errorMessage}, #{errorType.name})
    </insert>

<!--    종목 추천 저장 -->
    <insert id="insertAnalysis" parameterType="org.scoula.domain.chatbot.dto.ChatAnalysisDto">
        INSERT INTO chat_analysis (
            ticker, name, region, per, roe, eps, price, updated_at,
            pbr, open, high, low, volume, avg_price,
            foreign_rate, turn_rate, high52w, low52w
        ) VALUES (
                     #{ticker}, #{name}, #{region}, #{per}, #{roe}, #{eps}, #{price}, #{updatedAt},
                     #{pbr}, #{open}, #{high}, #{low}, #{volume}, #{avgPrice},
                     #{foreignRate}, #{turnRate}, #{high52w}, #{low52w}
                 )
            ON DUPLICATE KEY UPDATE
                                 name = VALUES(name),
                                 region = VALUES(region),
                                 per = VALUES(per),
                                 roe = VALUES(roe),
                                 eps = VALUES(eps),
                                 price = VALUES(price),
                                 updated_at = VALUES(updated_at),
                                 pbr = VALUES(pbr),
                                 open = VALUES(open),
                                 high = VALUES(high),
                                 low = VALUES(low),
                                 volume = VALUES(volume),
                                 avg_price = VALUES(avg_price),
                                 foreign_rate = VALUES(foreign_rate),
                                 turn_rate = VALUES(turn_rate),
                                 high52w = VALUES(high52w),
                                 low52w = VALUES(low52w)
    </insert>

    <insert id="insertRecommendation" parameterType="org.scoula.domain.chatbot.dto.ChatRecommendationDto" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO chat_recommendations (
            user_id, ticker, recommend_type, reason,
            expected_return, risk_level, risk_type, created_at
        ) VALUES (
                     #{userId}, #{ticker}, #{recommendType}, #{reason},
                     #{expectedReturn}, #{riskLevel}, #{riskType}, NOW()
                 )
    </insert>





</mapper>

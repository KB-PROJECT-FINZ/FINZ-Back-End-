<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.mapper.ranking.RankingMapper">

    <!-- (1) 내 수익률 및 전체 순위 -->
    <select id="selectMyRanking" resultType="org.scoula.domain.ranking.MyRankingDto" parameterType="map">
       <![CDATA[
        SELECT
            h.account_id AS user_id,
            ROUND(AVG(h.profit_rate), 2) AS gain_rate,
            it.name_kr AS risk_type,
            (
                SELECT COUNT(*) + 1
                FROM (
                         SELECT account_id, ROUND(AVG(profit_rate), 2) AS avg_rate
                         FROM holdings
                         GROUP BY account_id
                     ) sub
                WHERE sub.avg_rate > ROUND(AVG(h.profit_rate), 2)
            ) AS ranking,
            (
                SELECT ROUND(
                               100.0 * COUNT(*) / (SELECT COUNT(DISTINCT account_id) FROM holdings),
                               2
                       )
                FROM (
                         SELECT account_id, ROUND(AVG(profit_rate), 2) AS avg_rate
                         FROM holdings
                         GROUP BY account_id
                     ) sub
                WHERE sub.avg_rate <= ROUND(AVG(h.profit_rate), 2)
            ) AS top_percent
        FROM holdings h
                 JOIN user u ON h.account_id = u.id
                 JOIN investment_types it ON u.risk_type = it.risk_type
        WHERE h.account_id = #{userId}
        GROUP BY h.account_id, it.name_kr
        ]]>
    </select>
    <resultMap id="myRankingMap" type="org.scoula.domain.ranking.MyRankingDto">
        <result column="user_id" property="userId"/>
        <result column="gain_rate" property="gainRate"/>
        <result column="risk_type" property="riskType"/>
        <result column="ranking" property="ranking"/>
        <result column="top_percent" property="topPercent"/>
    </resultMap>

    <!-- (2) 전체 인기 종목 Top5 -->
    <select id="selectPopularStocks" resultType="org.scoula.domain.ranking.PopularStockDto" parameterType="string">
        <![CDATA[
        SELECT
            t.stock_code AS stock_code,
            s.name AS stock_name,
            COUNT(*) AS transaction_count,
            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS ranking,
                s.image_url AS image_url
        FROM transactions t
                 JOIN stocks s ON t.stock_code = s.code
        WHERE t.executed_at >= #{baseDate}
          AND t.executed_at < DATE_ADD(#{baseDate}, INTERVAL 7 DAY)
        GROUP BY t.stock_code, s.name, s.image_url
        ORDER BY transaction_count DESC
            LIMIT 5
        ]]>
    </select>

    <!-- (3) 전체 상위 수익률 TOP 100 -->
    <select id="selectTopRankingWithTraitGroup" resultType="org.scoula.domain.ranking.RankingByTraitGroupDto" parameterType="string">
        SELECT
            ranked.user_id,
            ranked.nickname,
            ranked.trait_group,
            ranked.gain_rate,
            ranked.ranking
        FROM (
                 SELECT
                     h.account_id AS user_id,
                     u.nickname AS nickname,
                     rt.name_kr AS trait_group,
                     ROUND(AVG(h.profit_rate), 2) AS gain_rate,
                     RANK() OVER (ORDER BY ROUND(AVG(h.profit_rate), 2) DESC) AS ranking
                 FROM holdings h
                          JOIN user u ON h.account_id = u.id
                          JOIN investment_types rt ON u.risk_type = rt.risk_type
                 GROUP BY h.account_id, u.nickname, rt.name_kr
             ) ranked
            LIMIT 100
    </select>


    <!-- (4) 성향 그룹별 상위 수익률 TOP 100 -->
    <select id="selectTopRankingByTraitGroup" resultType="org.scoula.domain.ranking.RankingByTraitGroupDto" parameterType="map">
        SELECT
        ranked.user_id,
        ranked.nickname,
        ranked.trait_group,
        ranked.original_trait,
        ranked.gain_rate,
        ranked.ranking
        FROM (
        SELECT
        h.account_id AS user_id,
        u.nickname AS nickname,
        rt.group_code AS trait_group,
        u.risk_type AS original_trait,
        ROUND(AVG(h.profit_rate), 2) AS gain_rate,
        RANK() OVER (ORDER BY ROUND(AVG(h.profit_rate), 2) DESC) AS ranking
        FROM holdings h
        JOIN user u ON h.account_id = u.id
        JOIN investment_types rt ON u.risk_type = rt.risk_type
        WHERE rt.group_code = #{traitGroup}
        GROUP BY h.account_id, u.nickname, u.risk_type
        ) ranked
        LIMIT 100
    </select>

</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.mapper.ranking.RankingMapper">

    <!-- (1) 내 수익률 및 전체 순위 -->
    <select id="selectMyRanking" resultType="org.scoula.domain.ranking.MyRankingDto" parameterType="map">
        <![CDATA[
        SELECT
            u.id AS user_id,
            COALESCE(ROUND(AVG(h.profit_rate), 2), NULL) AS gain_rate,
            it.name_kr AS risk_type,
            CASE
                WHEN COUNT(h.profit_rate) = 0 THEN NULL
                ELSE (
                    SELECT COUNT(*) + 1
                    FROM (
                             SELECT account_id, ROUND(AVG(profit_rate), 2) AS avg_rate
                             FROM holdings
                             WHERE created_at >= #{baseDate}
                               AND created_at < DATE_ADD(#{baseDate}, INTERVAL 7 DAY)
                             GROUP BY account_id
                         ) sub
                    WHERE sub.avg_rate > ROUND(AVG(h.profit_rate), 2)
                )
                END AS ranking,
            CASE
                WHEN COUNT(h.profit_rate) = 0 THEN NULL
                ELSE (
                    SELECT ROUND(
                                   100.0 * COUNT(*) / (SELECT COUNT(DISTINCT account_id) FROM holdings
                                                       WHERE created_at >= #{baseDate}
                                                         AND created_at < DATE_ADD(#{baseDate}, INTERVAL 7 DAY)),
                                   2
                           )
                    FROM (
                             SELECT account_id, ROUND(AVG(profit_rate), 2) AS avg_rate
                             FROM holdings
                             WHERE created_at >= #{baseDate}
                               AND created_at < DATE_ADD(#{baseDate}, INTERVAL 7 DAY)
                             GROUP BY account_id
                         ) sub
                    WHERE sub.avg_rate <= ROUND(AVG(h.profit_rate), 2)
                )
                END AS top_percent
        FROM user u
                 LEFT JOIN holdings h ON u.id = h.account_id
                 LEFT JOIN investment_types it ON u.risk_type = it.risk_type
        WHERE u.id = #{userId}
          AND h.created_at >= #{baseDate}
          AND h.created_at < DATE_ADD(#{baseDate}, INTERVAL 7 DAY)
        GROUP BY u.id, it.name_kr
        ]]>
    </select>

    <!-- (2) 전체 인기 종목 Top5 -->
    <select id="selectPopularStocks" resultType="org.scoula.domain.ranking.PopularStockDto" parameterType="string">
        <![CDATA[
        SELECT
            t.stock_code AS stock_code,
            s.name AS stock_name,
            COUNT(*) AS transaction_count,
            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS ranking,
                s.image_url AS image_url
        FROM transactions t
                 JOIN stocks s ON t.stock_code = s.code
        WHERE t.executed_at >= #{baseDate}
          AND t.executed_at < DATE_ADD(#{baseDate}, INTERVAL 7 DAY)
        GROUP BY t.stock_code, s.name, s.image_url
        ORDER BY transaction_count DESC
            LIMIT 5
        ]]>
    </select>

    <!-- (3) 전체 상위 수익률 TOP 100 -->
    <select id="selectTopRankingWithTraitGroup" resultType="org.scoula.domain.ranking.RankingByTraitGroupDto" parameterType="string">
        <![CDATA[
        SELECT
            ranked.user_id,
            ranked.nickname,
            ranked.trait_group,
            ranked.gain_rate,
            ranked.ranking
        FROM (
                 SELECT
                     h.account_id AS user_id,
                     IFNULL(u.nickname, '익명') AS nickname,
                     IFNULL(rt.name_kr, '기타') AS trait_group,
                     ROUND(AVG(h.profit_rate), 2) AS gain_rate,
                     RANK() OVER (ORDER BY ROUND(AVG(h.profit_rate), 2) DESC) AS ranking
                 FROM holdings h
                          LEFT JOIN user u ON h.account_id = u.id
                          LEFT JOIN investment_types rt ON u.risk_type = rt.risk_type
                 WHERE h.created_at >= #{baseDate}
                   AND h.created_at < DATE_ADD(#{baseDate}, INTERVAL 7 DAY)
                 GROUP BY h.account_id
             ) ranked
            LIMIT 100
        ]]>
    </select>

    <!-- (4) 성향 그룹별 상위 수익률 TOP 100 -->
    <resultMap id="RankingByTraitGroupResultMap" type="org.scoula.domain.ranking.RankingByTraitGroupDto">
        <result property="userId" column="user_id"/>
        <result property="nickname" column="nickname"/>
        <result property="traitGroup" column="trait_group"/>
        <result property="originalTrait" column="original_trait"/>
        <result property="gainRate" column="gain_rate"/>
        <result property="ranking" column="ranking"/>
    </resultMap>

    <select id="selectTopRankingByTraitGroup" resultMap="RankingByTraitGroupResultMap" parameterType="map">
    <![CDATA[
        SELECT
            ranked.user_id,
            ranked.nickname,
            ranked.trait_group,
            ranked.original_trait,
            ranked.gain_rate,
            ranked.ranking
        FROM (
                 SELECT
                     h.account_id AS user_id,
                     IFNULL(u.nickname, '익명') AS nickname,
                     rt.group_code AS trait_group,
                     u.risk_type AS original_trait,
                     ROUND(AVG(h.profit_rate), 2) AS gain_rate,
                     RANK() OVER (ORDER BY ROUND(AVG(h.profit_rate), 2) DESC) AS ranking
                 FROM holdings h
                          JOIN user u ON h.account_id = u.id
                          JOIN investment_types rt ON u.risk_type = rt.risk_type
                 WHERE rt.group_code = #{traitGroup}
                   AND h.created_at >= #{baseDate}
                   AND h.created_at < DATE_ADD(#{baseDate}, INTERVAL 7 DAY)
                 GROUP BY h.account_id
             ) ranked
            LIMIT 100
        ]]>
</select>

</mapper>
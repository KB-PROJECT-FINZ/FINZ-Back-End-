<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.mapper.ranking.RankingMapper">

    <!-- ✅ popular_stocks: DAY (오늘/어제) -->
    <select id="selectPopularStocksCachedDay" resultType="org.scoula.domain.ranking.PopularStockDto">
        <![CDATA[
        SELECT
            ps.stock_code        AS stockCode,
            ps.stock_name        AS stockName,
            ps.transaction_count AS transactionCount,
            ps.ranking           AS ranking,
            s.image_url          AS imageUrl
        FROM popular_stocks ps
                 LEFT JOIN stocks s ON s.code = ps.stock_code
        WHERE ps.date_type = 'DAY'
          AND ps.base_date = #{baseDate}
        ORDER BY ps.ranking ASC
            LIMIT 10
        ]]>
    </select>

    <!-- ✅ popular_stocks: WEEK (특정 주차) -->
    <select id="selectPopularStocksCachedWeek" resultType="org.scoula.domain.ranking.PopularStockDto">
        <![CDATA[
        SELECT
            ps.stock_code        AS stockCode,
            ps.stock_name        AS stockName,
            ps.transaction_count AS transactionCount,
            ps.ranking           AS ranking,
            s.image_url          AS imageUrl
        FROM popular_stocks ps
                 LEFT JOIN stocks s ON s.code = ps.stock_code
        WHERE ps.date_type = 'WEEK'
          AND ps.base_date = #{baseDate}
        ORDER BY ps.ranking ASC
            LIMIT 10
        ]]>
    </select>

    <!-- ✅ popular_stocks에서 최신 WEEK 기준일 -->
    <select id="selectLatestWeekBaseDateFromPopular" resultType="string">
        <![CDATA[
        SELECT DATE_FORMAT(MAX(base_date), '%Y-%m-%d')
        FROM popular_stocks
        WHERE date_type = 'WEEK'
        ]]>
    </select>

    <!-- ✅ ranking_by_trait_group: 최신 WEEK 기준일 -->
    <select id="selectLatestWeekBaseDate" resultType="string">
        <![CDATA[
        SELECT DATE_FORMAT(MAX(base_date), '%Y-%m-%d')
        FROM ranking_by_trait_group
        WHERE date_type = 'WEEK'
          AND base_date <= CURDATE()
        ]]>
    </select>

    <!-- ✅ 해당 WEEK 기준일 존재 여부 -->
    <select id="existsWeekCacheByDate" parameterType="string" resultType="int">
        <![CDATA[
        SELECT EXISTS(
            SELECT 1
            FROM ranking_by_trait_group
            WHERE date_type = 'WEEK'
              AND base_date = #{baseDate}
        )
        ]]>
    </select>

    <!-- ✅ 주간 전체 랭킹 (평면) -->
    <select id="selectWeeklyRankingCached" resultType="org.scoula.domain.ranking.RankingByTraitGroupDto">
        <![CDATA[
        SELECT
            r.user_id                  AS userId,
            IFNULL(u.nickname,'익명')  AS nickname,
            it.group_code              AS traitGroup,     -- 영문 그룹코드 (AGGRESSIVE…)
            u.risk_type                AS originalTrait,  -- 세부코드 (AGR/TEC…)
            r.gain_rate                AS gainRate,
            r.ranking                  AS ranking,
            IFNULL(u.profile_image, 1) AS profileImage    -- 프로필 번호(1~7), 기본 1
        FROM ranking_by_trait_group r
                 JOIN `user` u            ON u.id = r.user_id
                 JOIN investment_types it ON it.risk_type = u.risk_type
        WHERE r.date_type = 'WEEK'
          AND r.base_date = #{baseDate}
        ORDER BY r.ranking ASC
            LIMIT 100
        ]]>
    </select>

    <!-- ✅ 주간 성향별 랭킹 (그룹 필터 필수) -->
    <select id="selectGroupedWeeklyRankingCached" resultType="org.scoula.domain.ranking.RankingByTraitGroupDto">
        <![CDATA[
        SELECT
            r.user_id                  AS userId,
            IFNULL(u.nickname,'익명')  AS nickname,
            it.group_code              AS traitGroup,     -- 영문 그룹코드
            u.risk_type                AS originalTrait,  -- 세부코드
            r.gain_rate                AS gainRate,
            r.ranking                  AS ranking,
            IFNULL(u.profile_image, 1) AS profileImage    -- 프로필 번호
        FROM ranking_by_trait_group r
                 JOIN `user` u            ON u.id = r.user_id
                 JOIN investment_types it ON it.risk_type = u.risk_type
        WHERE r.date_type = 'WEEK'
          AND r.base_date = #{baseDate}
          AND it.group_code = #{traitGroup}              -- 🔥 여기 필터가 핵심
        ORDER BY r.ranking ASC
            LIMIT 100
        ]]>
    </select>

    <!-- ✅ 내 랭킹 -->
    <select id="selectMyRankingCached" resultType="org.scoula.domain.ranking.MyRankingDto">
        <![CDATA[
        SELECT
            me.user_id                                AS userId,
            me.ranking                                AS ranking,
            me.gain_rate                              AS gainRate,
            ROUND(100 * (me.ranking - 1) / NULLIF(t.total_cnt, 0), 2) AS topPercent,
            it.group_code                             AS riskType,      -- 내 그룹(영문)
            u.risk_type                               AS originalTrait, -- 내 세부코드
            DATE_FORMAT(me.base_date, '%Y-%m-%d')     AS baseDate
        FROM ranking_by_trait_group me
                 JOIN `user` u            ON u.id = me.user_id
                 JOIN investment_types it ON it.risk_type = u.risk_type
                 JOIN (
            SELECT COUNT(*) AS total_cnt
            FROM ranking_by_trait_group
            WHERE date_type = 'WEEK'
              AND base_date = #{baseDate}
        ) t ON 1 = 1
        WHERE me.date_type = 'WEEK'
          AND me.base_date = #{baseDate}
          AND me.user_id = #{userId}
            LIMIT 1
        ]]>
    </select>

</mapper>

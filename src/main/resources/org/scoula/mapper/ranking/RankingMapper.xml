<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.scoula.mapper.ranking.RankingMapper">

    <!-- 1) 내 수익률 및 전체 순위 -->
    <select id="selectMyRanking" resultType="org.scoula.domain.ranking.MyRankingDto" parameterType="map">
        <![CDATA[
        SELECT *
        FROM (
                 SELECT
                     u.id AS userId,
                     RANK() OVER (ORDER BY AVG(ah.profit_rate) DESC) AS ranking,
                         AVG(ah.profit_rate) AS gainRate,
                     ROUND(100 * (RANK() OVER (ORDER BY AVG(ah.profit_rate) DESC) - 1) / COUNT(*) OVER (), 2) AS topPercent,
                     u.risk_type AS riskType
                 FROM asset_history ah
                          JOIN user_accounts ua ON ah.account_id = ua.account_id
                          JOIN user u ON ua.user_id = u.id
                 WHERE ah.record_date BETWEEN #{baseDate} AND DATE_ADD(#{baseDate}, INTERVAL 6 DAY)
                 GROUP BY u.id, u.risk_type
             ) sub
        WHERE sub.userId = #{userId}
        ]]>
    </select>

    <!-- 2) 인기 종목 (지난주 등 기간 기준) -->
    <select id="selectPopularStocks" resultType="org.scoula.domain.ranking.PopularStockDto" parameterType="string">
        <![CDATA[
        SELECT
            t.stock_code AS stock_code,
            s.name AS stock_name,
            COUNT(*) AS transaction_count,
            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS ranking,
                s.image_url AS image_url
        FROM transactions t
                 JOIN stocks s ON t.stock_code = s.code
        WHERE t.executed_at >= #{baseDate}
          AND t.executed_at < DATE_ADD(#{baseDate}, INTERVAL 7 DAY)
        GROUP BY t.stock_code, s.name, s.image_url
        ORDER BY transaction_count DESC
            LIMIT 10
        ]]>
    </select>

    <!-- 3) 실시간 인기 종목 (오늘 기준) -->
    <select id="selectRealTimePopularStocks" resultType="org.scoula.domain.ranking.PopularStockDto" parameterType="string">
        <![CDATA[
        SELECT
            t.stock_code AS stock_code,
            s.name AS stock_name,
            COUNT(*) AS transaction_count,
            ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) AS ranking,
                s.image_url AS image_url
        FROM transactions t
                 JOIN stocks s ON t.stock_code = s.code
        WHERE DATE(t.executed_at) = #{baseDate}
        GROUP BY t.stock_code, s.name, s.image_url
        ORDER BY transaction_count DESC
            LIMIT 10
        ]]>
    </select>

    <!-- 4) 전체 상위 수익률 TOP 100 -->
    <select id="selectTopRankingWithTraitGroup" resultType="org.scoula.domain.ranking.RankingByTraitGroupDto" parameterType="string">
    <![CDATA[
        SELECT
            u.id AS user_id,
            IFNULL(u.nickname, '익명') AS nickname,
            rt.group_code AS trait_group,
            rt.name_kr AS trait_group_name,
            u.risk_type AS original_trait,
            AVG(ah.profit_rate) AS gain_rate,
            RANK() OVER (ORDER BY AVG(ah.profit_rate) DESC) AS ranking
        FROM asset_history ah
                 JOIN user_accounts ua ON ah.account_id = ua.account_id
                 JOIN user u ON ua.user_id = u.id
                 JOIN investment_types rt ON u.risk_type = rt.risk_type
        WHERE ah.record_date BETWEEN #{baseDate} AND DATE_ADD(#{baseDate}, INTERVAL 6 DAY)
        GROUP BY u.id, u.nickname, rt.group_code, rt.name_kr, u.risk_type
        ORDER BY gain_rate DESC
            LIMIT 100
        ]]>
    </select>

    <!-- 5) 성향 그룹별 상위 수익률 TOP 100 -->
    <select id="selectTopRankingByTraitGroup" resultType="org.scoula.domain.ranking.RankingByTraitGroupDto" parameterType="map">
        <![CDATA[
        SELECT
            u.id AS user_id,
            IFNULL(u.nickname, '익명') AS nickname,
            rt.group_code AS trait_group,
            u.risk_type AS original_trait,
            ROUND(AVG(ah.profit_rate), 2) AS gain_rate,
            RANK() OVER (ORDER BY AVG(ah.profit_rate) DESC) AS ranking
        FROM asset_history ah
                 JOIN user_accounts ua ON ah.account_id = ua.account_id
                 JOIN user u ON ua.user_id = u.id
                 JOIN investment_types rt ON u.risk_type = rt.risk_type
        WHERE rt.group_code = #{traitGroup}
          AND ah.record_date BETWEEN #{baseDate} AND DATE_ADD(#{baseDate}, INTERVAL 6 DAY)
        GROUP BY u.id, u.nickname, rt.group_code, u.risk_type
        ORDER BY gain_rate DESC
            LIMIT 100
        ]]>
    </select>

    <!-- 6) baseDate 데이터 존재 여부 확인 -->
    <select id="existsAssetHistoryByDate" parameterType="java.time.LocalDate" resultType="int">
        SELECT EXISTS(
            SELECT 1 FROM asset_history
            WHERE record_date BETWEEN #{baseDate} AND DATE_ADD(#{baseDate}, INTERVAL 6 DAY)
        )
    </select>


</mapper>